module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\nfunction parseControl(controlData) {\n    return controlData.pipe(operators_1.concatMap(function (data) { return data.split(''); }), operators_1.scan(function (acc, value) {\n        if (acc.indexOf('}') >= 0) {\n            return value;\n        }\n        else {\n            return acc + value;\n        }\n    }, ''), operators_1.filter(function (value) { return value.indexOf('}') >= 0; }), operators_1.map(function (value) { return JSON.parse(value); }));\n}\nexports.parseControl = parseControl;\nfunction decodeUnsigned12BitData(samples) {\n    var samples12Bit = [];\n    // tslint:disable:no-bitwise\n    for (var i = 0; i < samples.length; i++) {\n        if (i % 3 === 0) {\n            samples12Bit.push(samples[i] << 4 | samples[i + 1] >> 4);\n        }\n        else {\n            samples12Bit.push((samples[i] & 0xf) << 8 | samples[i + 1]);\n            i++;\n        }\n    }\n    // tslint:enable:no-bitwise\n    return samples12Bit;\n}\nexports.decodeUnsigned12BitData = decodeUnsigned12BitData;\nfunction decodeEEGSamples(samples) {\n    return decodeUnsigned12BitData(samples)\n        .map(function (n) { return 0.48828125 * (n - 0x800); });\n}\nexports.decodeEEGSamples = decodeEEGSamples;\nfunction parseTelemetry(data) {\n    // tslint:disable:object-literal-sort-keys\n    return {\n        sequenceId: data.getUint16(0),\n        batteryLevel: data.getUint16(2) / 512.,\n        fuelGaugeVoltage: data.getUint16(4) * 2.2,\n        // Next 2 bytes are probably ADC millivolt level, not sure\n        temperature: data.getUint16(8),\n    };\n    // tslint:enable:object-literal-sort-keys\n}\nexports.parseTelemetry = parseTelemetry;\nfunction parseImuReading(data, scale) {\n    function sample(startIndex) {\n        return {\n            x: scale * data.getInt16(startIndex),\n            y: scale * data.getInt16(startIndex + 2),\n            z: scale * data.getInt16(startIndex + 4),\n        };\n    }\n    // tslint:disable:object-literal-sort-keys\n    return {\n        sequenceId: data.getUint16(0),\n        samples: [sample(2), sample(8), sample(14)],\n    };\n    // tslint:enable:object-literal-sort-keys\n}\nfunction parseAccelerometer(data) {\n    return parseImuReading(data, 0.0000610352);\n}\nexports.parseAccelerometer = parseAccelerometer;\nfunction parseGyroscope(data) {\n    return parseImuReading(data, 0.0074768);\n}\nexports.parseGyroscope = parseGyroscope;\n//# sourceMappingURL=muse-parse.js.map",
dependencies: ["rxjs/operators"],
sourceMap: "{\"version\":3,\"file\":\"src/lib/muse-parse.js\",\"sourceRoot\":\"\",\"sources\":[\"src/lib/muse-parse.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { Observable } from 'rxjs';\\nimport { concatMap, filter, map, scan } from 'rxjs/operators';\\n\\nimport { AccelerometerData, EEGReading, GyroscopeData, TelemetryData } from './muse-interfaces';\\n\\nexport function parseControl(controlData: Observable<string>) {\\n    return controlData.pipe(\\n        concatMap((data) => data.split('')),\\n        scan((acc, value) => {\\n            if (acc.indexOf('}') >= 0) {\\n                return value;\\n            } else {\\n                return acc + value;\\n            }\\n        }, ''),\\n        filter((value) => value.indexOf('}') >= 0),\\n        map((value) => JSON.parse(value)),\\n    );\\n}\\n\\nexport function decodeUnsigned12BitData(samples: Uint8Array) {\\n    const samples12Bit = [];\\n    // tslint:disable:no-bitwise\\n    for (let i = 0; i < samples.length; i++) {\\n        if (i % 3 === 0) {\\n            samples12Bit.push(samples[i] << 4 | samples[i + 1] >> 4);\\n        } else {\\n            samples12Bit.push((samples[i] & 0xf) << 8 | samples[i + 1]);\\n            i++;\\n        }\\n    }\\n    // tslint:enable:no-bitwise\\n    return samples12Bit;\\n}\\n\\nexport function decodeEEGSamples(samples: Uint8Array) {\\n    return decodeUnsigned12BitData(samples)\\n        .map((n) => 0.48828125 * (n - 0x800));\\n}\\n\\nexport function parseTelemetry(data: DataView): TelemetryData {\\n    // tslint:disable:object-literal-sort-keys\\n    return {\\n        sequenceId: data.getUint16(0),\\n        batteryLevel: data.getUint16(2) / 512.,\\n        fuelGaugeVoltage: data.getUint16(4) * 2.2,\\n        // Next 2 bytes are probably ADC millivolt level, not sure\\n        temperature: data.getUint16(8),\\n    };\\n    // tslint:enable:object-literal-sort-keys\\n}\\n\\nfunction parseImuReading(data: DataView, scale: number) {\\n    function sample(startIndex: number) {\\n        return {\\n            x: scale * data.getInt16(startIndex),\\n            y: scale * data.getInt16(startIndex + 2),\\n            z: scale * data.getInt16(startIndex + 4),\\n        };\\n    }\\n    // tslint:disable:object-literal-sort-keys\\n    return {\\n        sequenceId: data.getUint16(0),\\n        samples: [sample(2), sample(8), sample(14)],\\n    };\\n    // tslint:enable:object-literal-sort-keys\\n}\\n\\nexport function parseAccelerometer(data: DataView): AccelerometerData {\\n    return parseImuReading(data, 0.0000610352);\\n}\\n\\nexport function parseGyroscope(data: DataView): GyroscopeData {\\n    return parseImuReading(data, 0.0074768);\\n}\\n\"]}",
headerContent: undefined,
mtime: 1578214476000
};