/// <reference path="../src/event-target.d.ts" />
/// <reference types="web-bluetooth" />
import { EventTarget } from "event-target-shim";
export declare class CharacteristicMock extends EventTarget implements BluetoothRemoteGATTCharacteristic {
    service: PrimaryServiceMock;
    uuid: string;
    value: DataView;
    properties: {
        authenticatedSignedWrites: boolean;
        broadcast: boolean;
        indicate: boolean;
        notify: boolean;
        read: boolean;
        reliableWrite: boolean;
        writableAuxiliaries: boolean;
        write: boolean;
        writeWithoutResponse: boolean;
    };
    oncharacteristicvaluechanged: (e: Event) => void;
    constructor(service: PrimaryServiceMock, uuid: string);
    startNotifications(): Promise<BluetoothRemoteGATTCharacteristic>;
    stopNotifications(): Promise<BluetoothRemoteGATTCharacteristic>;
    readValue(): Promise<DataView>;
    writeValue(): Promise<void>;
    getDescriptor(): Promise<never>;
    getDescriptors(): Promise<never>;
}
export declare class PrimaryServiceMock extends EventTarget implements BluetoothRemoteGATTService {
    device: DeviceMock;
    uuid: string;
    isPrimary: boolean;
    oncharacteristicvaluechanged: (e: Event) => void;
    onserviceadded: (e: Event) => void;
    onservicechanged: (e: Event) => void;
    onserviceremoved: (e: Event) => void;
    private characteristicMocks;
    constructor(device: DeviceMock, uuid: string, isPrimary?: boolean);
    getCharacteristic(characteristic: BluetoothCharacteristicUUID): Promise<CharacteristicMock>;
    getCharacteristics(): Promise<CharacteristicMock[]>;
    getIncludedService(): Promise<never>;
    getIncludedServices(): Promise<never[]>;
    getCharacteristicMock(characteristic: BluetoothCharacteristicUUID): CharacteristicMock;
}
export declare class GattMock extends EventTarget implements BluetoothRemoteGATTServer {
    device: DeviceMock;
    connected: boolean;
    constructor(device: DeviceMock);
    connect(): Promise<this>;
    disconnect(): void;
    getPrimaryService(service: BluetoothServiceUUID): Promise<PrimaryServiceMock>;
    getPrimaryServices(service?: BluetoothServiceUUID): Promise<PrimaryServiceMock[]>;
}
export declare class DeviceMock extends EventTarget implements BluetoothDevice {
    name: string;
    private services;
    watchingAdvertisements: boolean;
    gatt: GattMock;
    id: string;
    ongattserverdisconnected: (E: Event) => void;
    oncharacteristicvaluechanged: (E: Event) => void;
    onserviceadded: (E: Event) => void;
    onservicechanged: (E: Event) => void;
    onserviceremoved: (E: Event) => void;
    private serviceMocks;
    constructor(name: string, services: BluetoothServiceUUID[]);
    hasService(service: BluetoothServiceUUID): boolean;
    getServiceMock(service: BluetoothServiceUUID): PrimaryServiceMock;
    getServiceMocks(): PrimaryServiceMock[];
    watchAdvertisements(): Promise<void>;
    unwatchAdvertisements(): void;
}
export declare class WebBluetoothMock {
    devices: DeviceMock[];
    constructor(devices: DeviceMock[]);
    requestDevice(options: RequestDeviceOptions): Promise<DeviceMock>;
}
