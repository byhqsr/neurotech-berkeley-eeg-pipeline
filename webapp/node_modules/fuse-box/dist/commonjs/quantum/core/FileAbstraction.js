"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileAnalysis_1 = require("../../analysis/FileAnalysis");
const ASTTraverse_1 = require("../../ASTTraverse");
const RequireStatement_1 = require("./nodes/RequireStatement");
const escodegen = require("escodegen");
const path = require("path");
const Utils_1 = require("../../Utils");
const FuseBoxIsServerCondition_1 = require("./nodes/FuseBoxIsServerCondition");
const FuseBoxIsBrowserCondition_1 = require("./nodes/FuseBoxIsBrowserCondition");
const AstUtils_1 = require("./AstUtils");
const ExportsInterop_1 = require("./nodes/ExportsInterop");
const UseStrict_1 = require("./nodes/UseStrict");
const TypeOfExportsKeyword_1 = require("./nodes/TypeOfExportsKeyword");
const TypeOfModuleKeyword_1 = require("./nodes/TypeOfModuleKeyword");
const NamedExport_1 = require("./nodes/NamedExport");
const GenericAst_1 = require("./nodes/GenericAst");
const globalNames = new Set(["__filename", "__dirname", "exports", "module"]);
class FileAbstraction {
    constructor(fuseBoxPath, packageAbstraction) {
        this.fuseBoxPath = fuseBoxPath;
        this.packageAbstraction = packageAbstraction;
        this.fileMapRequested = false;
        this.treeShakingRestricted = false;
        this.dependencies = new Map();
        this.isEcmaScript6 = false;
        this.shakable = false;
        this.canBeRemoved = false;
        this.namedRequireStatements = new Map();
        this.requireStatements = new Set();
        this.fuseboxIsServerConditions = new Set();
        this.fuseboxIsBrowserConditions = new Set();
        this.exportsInterop = new Set();
        this.useStrict = new Set();
        this.typeofExportsKeywords = new Set();
        this.typeofModulesKeywords = new Set();
        this.typeofWindowKeywords = new Set();
        this.typeofGlobalKeywords = new Set();
        this.typeofDefineKeywords = new Set();
        this.typeofRequireKeywords = new Set();
        this.namedExports = new Map();
        this.processNodeEnv = new Set();
        this.isEntryPoint = false;
        this.globalVariables = new Set();
        this.fuseBoxDir = Utils_1.ensureFuseBoxPath(path.dirname(fuseBoxPath));
        this.setID(fuseBoxPath);
        packageAbstraction.registerFileAbstraction(this);
    }
    getFuseBoxFullPath() {
        return `${this.packageAbstraction.name}/${this.fuseBoxPath}`;
    }
    loadString(contents) {
        this.ast = FileAnalysis_1.acornParse(contents);
        this.analyse();
    }
    setID(id) {
        this.id = id;
    }
    getID() {
        return this.id;
    }
    addFileMap() {
        this.fileMapRequested = true;
    }
    isTreeShakingAllowed() {
        return this.treeShakingRestricted === false && this.shakable;
    }
    restrictTreeShaking() {
        this.treeShakingRestricted = true;
    }
    addDependency(file, statement) {
        let list;
        if (this.dependencies.has(file)) {
            list = this.dependencies.get(file);
        }
        else {
            list = new Set();
            this.dependencies.set(file, list);
        }
        list.add(statement);
    }
    getDependencies() {
        return this.dependencies;
    }
    loadAst(ast) {
        ast.type = "Program";
        this.ast = ast;
        this.analyse();
    }
    findRequireStatements(exp) {
        let list = [];
        this.requireStatements.forEach(statement => {
            if (exp.test(statement.value)) {
                list.push(statement);
            }
        });
        return list;
    }
    wrapWithFunction(args) {
        this.wrapperArguments = args;
    }
    isRequireStatementUsed() {
        return this.requireStatements.size > 0;
    }
    isDirnameUsed() {
        return this.globalVariables.has("__dirname");
    }
    isFilenameUsed() {
        return this.globalVariables.has("__filename");
    }
    isExportStatementInUse() {
        return this.globalVariables.has("exports");
    }
    isModuleStatementInUse() {
        return this.globalVariables.has("module");
    }
    isExportInUse() {
        return this.globalVariables.has("exports") || this.globalVariables.has("module");
    }
    setEnryPoint(globalsName) {
        this.isEntryPoint = true;
        this.globalsName = globalsName;
        this.treeShakingRestricted = true;
    }
    generate(ensureEs5 = false) {
        let code = escodegen.generate(this.ast);
        if (ensureEs5 && this.isEcmaScript6) {
            code = Utils_1.transpileToEs5(code);
        }
        let fn = ["function(", this.wrapperArguments ? this.wrapperArguments.join(",") : "", '){\n'];
        if (this.isDirnameUsed()) {
            fn.push(`var __dirname = ${JSON.stringify(this.fuseBoxDir)};` + "\n");
        }
        if (this.isFilenameUsed()) {
            fn.push(`var __filename = ${JSON.stringify(this.fuseBoxPath)};` + "\n");
        }
        fn.push(code, '\n}');
        if (this.fileMapRequested) {
            const pkg = JSON.stringify(this.packageAbstraction.name);
            const name = JSON.stringify(this.fuseBoxDir);
            fn.push("\n" + `$fsx.s[${JSON.stringify(this.getID())}] = [${pkg},${name} ]`);
        }
        code = fn.join("");
        return code;
    }
    onNode(node, parent, prop, idx) {
        if (AstUtils_1.matchesEcmaScript6(node)) {
            this.isEcmaScript6 = true;
        }
        this.namedRequireStatements.forEach((statement, key) => {
            const importedName = AstUtils_1.trackRequireMember(node, key);
            if (importedName) {
                statement.usedNames.add(importedName);
            }
        });
        AstUtils_1.isExportMisused(node, name => {
            const createdExports = this.namedExports.get(name);
            if (createdExports) {
                createdExports.eligibleForTreeShaking = false;
            }
        });
        AstUtils_1.matchNamedExport(node, (name) => {
            let namedExport;
            if (!this.namedExports.get(name)) {
                namedExport = new NamedExport_1.NamedExport();
                namedExport.name = name;
                this.namedExports.set(name, namedExport);
            }
            else {
                namedExport = this.namedExports.get(name);
            }
            namedExport.addNode(parent, prop, node);
        });
        if (AstUtils_1.matchesSingleFunction(node, "require")) {
            this.requireStatements.add(new RequireStatement_1.RequireStatement(this, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "module")) {
            this.typeofModulesKeywords.add(new TypeOfModuleKeyword_1.TypeOfModuleKeyword(parent, prop, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "require")) {
            this.typeofRequireKeywords.add(new GenericAst_1.GenericAst(parent, prop, node));
        }
        if (AstUtils_1.matchesNodeEnv(node)) {
            this.processNodeEnv.add(new GenericAst_1.GenericAst(parent, prop, node));
        }
        if (AstUtils_1.matcheObjectDefineProperty(node, "exports")) {
            this.exportsInterop.add(new ExportsInterop_1.ExportsInterop(parent, prop, node));
            return false;
        }
        if (AstUtils_1.matchesAssignmentExpression(node, 'exports', '__esModule')) {
            this.exportsInterop.add(new ExportsInterop_1.ExportsInterop(parent, prop, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "exports")) {
            this.typeofExportsKeywords.add(new TypeOfExportsKeyword_1.TypeOfExportsKeyword(parent, prop, node));
        }
        if (AstUtils_1.matchesLiteralStringExpression(node, "use strict")) {
            this.useStrict.add(new UseStrict_1.UseStrict(parent, prop, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "global")) {
            this.typeofGlobalKeywords.add(new GenericAst_1.GenericAst(parent, prop, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "define")) {
            this.typeofDefineKeywords.add(new GenericAst_1.GenericAst(parent, prop, node));
        }
        if (AstUtils_1.matchesTypeOf(node, "window")) {
            this.typeofWindowKeywords.add(new GenericAst_1.GenericAst(parent, prop, node));
        }
        const requireIdentifier = AstUtils_1.matchRequireIdentifier(node);
        if (requireIdentifier) {
            const identifiedRequireStatement = new RequireStatement_1.RequireStatement(this, node.init);
            this.namedRequireStatements.set(requireIdentifier, identifiedRequireStatement);
            this.requireStatements.add(identifiedRequireStatement);
            return false;
        }
        if (AstUtils_1.matchesDoubleMemberExpression(node, "FuseBox")) {
            if (node.property.name === "import") {
                parent.callee = {
                    type: "Identifier",
                    name: "require"
                };
                this.requireStatements.add(new RequireStatement_1.RequireStatement(this, parent));
            }
            if (node.property.name === "isServer") {
                this.fuseboxIsServerConditions.add(new FuseBoxIsServerCondition_1.FuseBoxIsServerCondition(this, parent, prop, idx));
            }
            if (node.property.name === "isBrowser") {
                this.fuseboxIsBrowserConditions.add(new FuseBoxIsBrowserCondition_1.FuseBoxIsBrowserCondition(this, parent, prop, idx));
            }
            return false;
        }
        if (node && node.type === "Identifier") {
            let globalVariable;
            if (globalNames.has(node.name)) {
                globalVariable = node.name;
            }
            if (globalVariable) {
                if (!this.globalVariables.has(globalVariable)) {
                    this.globalVariables.add(globalVariable);
                }
            }
        }
    }
    analyse() {
        ASTTraverse_1.ASTTraverse.traverse(this.ast, {
            pre: (node, parent, prop, idx) => this.onNode(node, parent, prop, idx)
        });
    }
}
exports.FileAbstraction = FileAbstraction;
