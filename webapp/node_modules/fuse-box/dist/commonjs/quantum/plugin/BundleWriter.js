"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const realm_utils_1 = require("realm-utils");
const Bundle_1 = require("../../core/Bundle");
const Utils_1 = require("../../Utils");
const fs = require("fs");
class BundleWriter {
    constructor(core) {
        this.core = core;
        this.bundles = new Map();
    }
    getUglifyJSOptions() {
        const mainOptions = {};
        return Object.assign({}, this.core.opts.shouldUglify() || {}, mainOptions);
    }
    createBundle(name, code) {
        let bundle = new Bundle_1.Bundle(name, this.core.producer.fuse.copy(), this.core.producer);
        bundle.generatedCode = new Buffer(code);
        this.bundles.set(bundle.name, bundle);
        return bundle;
    }
    addShims() {
        const producer = this.core.producer;
        if (producer.fuse.context.shim) {
            const shims = [];
            for (let name in producer.fuse.context.shim) {
                let item = producer.fuse.context.shim[name];
                if (item.source) {
                    let shimPath = Utils_1.ensureUserPath(item.source);
                    if (!fs.existsSync(shimPath)) {
                        console.warn(`Shim erro: Not found: ${shimPath}`);
                    }
                    else {
                        shims.push(fs.readFileSync(shimPath).toString());
                    }
                }
            }
            if (shims.length) {
                this.createBundle("shims.js", shims.join("\n"));
            }
        }
    }
    process() {
        const producer = this.core.producer;
        let apiName2bake = this.core.opts.shouldBakeApiIntoBundle();
        if (apiName2bake) {
            let targetBundle = producer.bundles.get(apiName2bake);
            if (!targetBundle) {
                this.core.log.echoBoldRed(`  → Error. Can't find bundle name ${targetBundle}`);
            }
            else {
                targetBundle.generatedCode = new Buffer(this.core.api.render() + "\n" + targetBundle.generatedCode);
            }
        }
        else {
            this.createBundle("api.js", this.core.api.render());
        }
        this.addShims();
        producer.bundles.forEach(bundle => {
            this.bundles.set(bundle.name, bundle);
        });
        producer.bundles = this.bundles;
        return realm_utils_1.each(producer.bundles, (bundle) => {
            if (this.core.opts.shouldUglify()) {
                const UglifyJs = require("uglify-js");
                this.core.log.echoInfo(`Uglifying ${bundle.name}`);
                const result = UglifyJs.minify(bundle.generatedCode.toString(), this.getUglifyJSOptions());
                if (result.error) {
                    this.core.log.echoBoldRed(`  → Error during uglifying ${bundle.name}`);
                    throw result.error;
                }
                bundle.generatedCode = result.code;
                this.core.log.echoInfo(`Done Uglifying ${bundle.name}`);
            }
            return bundle.context.output.writeCurrent(bundle.generatedCode);
        }).then(() => {
            if (this.core.opts.webIndexPlugin) {
                return this.core.opts.webIndexPlugin.producerEnd(producer);
            }
        });
    }
}
exports.BundleWriter = BundleWriter;
