"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class QuantumOptions {
    constructor(opts) {
        this.removeExportsInterop = true;
        this.removeUseStrict = true;
        this.ensureES5 = true;
        this.replaceProcessEnv = true;
        this.showWarnings = true;
        this.optsTarget = "browser";
        this.treeshake = true;
        opts = opts || {};
        if (opts.target) {
            this.optsTarget = opts.target;
        }
        if (opts.api) {
            this.apiCallback = opts.api;
        }
        if (opts.uglify) {
            this.uglify = opts.uglify;
        }
        if (opts.warnings !== undefined) {
            this.showWarnings = opts.warnings;
        }
        if (opts.removeExportsInterop !== undefined) {
            this.removeExportsInterop = opts.removeExportsInterop;
        }
        if (opts.replaceProcessEnv !== undefined) {
            this.replaceProcessEnv = this.replaceProcessEnv;
        }
        if (opts.removeUseStrict !== undefined) {
            this.removeUseStrict = opts.removeUseStrict;
        }
        if (opts.webIndexPlugin) {
            this.webIndexPlugin = opts.webIndexPlugin;
        }
        if (opts.bakeApiIntoBundle) {
            this.bakeApiIntoBundle = opts.bakeApiIntoBundle;
        }
        if (opts.ensureES5 !== undefined) {
            this.ensureES5 = opts.ensureES5;
        }
        if (opts.treeshake !== undefined) {
            this.treeshake = opts.treeshake;
        }
    }
    shouldRemoveUseStrict() {
        return this.removeUseStrict;
    }
    shouldEnsureES5() {
        return this.ensureES5;
    }
    shouldShowWarnings() {
        return this.showWarnings;
    }
    shouldUglify() {
        return this.uglify === true;
    }
    shouldBakeApiIntoBundle() {
        return this.bakeApiIntoBundle;
    }
    shouldTreeShake() {
        return this.treeshake;
    }
    shouldRemoveExportsInterop() {
        return this.removeExportsInterop;
    }
    shouldReplaceProcessEnv() {
        return this.replaceProcessEnv;
    }
    isTargetUniveral() {
        return this.optsTarget === "universal";
    }
    isTargetServer() {
        return this.optsTarget === "server";
    }
    isTargetBrowser() {
        return this.optsTarget === "browser";
    }
}
exports.QuantumOptions = QuantumOptions;
